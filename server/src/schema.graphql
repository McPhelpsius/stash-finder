type Query {
  users: [User]
  stashes: [Stash]
  user(id: ID!): User
  stash(id: ID!): Stash
  me(id: ID!): User
}

type Mutation {
  createUser(
    name: String!
    email: String!
    password: String!
    isAdmin: String
  ): User
  deleteUser(id: ID!): User
  updateUser(
    id: ID!
    name: String
    password: String
    email: String
    role: Role
    rank: Float
  ): User
  createStash(
    id: ID!
    name: String!
    lat: Float!
    long: Float!
    claimCode: String!
    clue1: String!
    clue2: String!
    claimed: Boolean
  ): Stash
  deleteStash(id: ID!): Stash
  updateStash(
    id: ID!
    name: String
    lat: Float
    long: Float
    claimCode: String
    clue1: String
    clue2: String
    claimed: Boolean
  ): Stash
  login(email: String!, password: String!): AuthPayload!
  signup(name: String!, email: String!, password: String!): AuthPayload!
}

type AuthPayload {
  token: String!
  user: User!
}

enum Role {
  ADMIN
  HUNTER
}

type User {
  id: ID!
  name: String!
  password: String!
  email: String!
  role: Role
  rank: Float
}

type Stash {
  id: ID!
  name: String!
  lat: Float!
  long: Float!
  claimCode: String!
  clue1: String!
  clue2: String!
  claimed: Boolean
}
