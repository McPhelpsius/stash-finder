# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type Stash implements Node {
  id: ID!
  name: String!
  lat: Float!
  long: Float!
  claimCode: String!
  clue1: String!
  clue2: String!
  claimed: Boolean
}

type User implements Node {
  id: ID!
  name: String!
  password: String!
  email: String!
  stashClaims(where: StashWhereInput, orderBy: StashOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Stash!]
  rank: Float
  role: Role
}


#
# Other Types
#

type AggregateStash {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """
  The number of nodes that have been affected by the Batch operation.
  """
  count: Long!
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createStash(data: StashCreateInput!): Stash!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateStash(data: StashUpdateInput!, where: StashWhereUniqueInput!): Stash
  deleteUser(where: UserWhereUniqueInput!): User
  deleteStash(where: StashWhereUniqueInput!): Stash
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertStash(where: StashWhereUniqueInput!, create: StashCreateInput!, update: StashUpdateInput!): Stash!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput!): BatchPayload!
  updateManyStashes(data: StashUpdateInput!, where: StashWhereInput!): BatchPayload!
  deleteManyUsers(where: UserWhereInput!): BatchPayload!
  deleteManyStashes(where: StashWhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  stashes(where: StashWhereInput, orderBy: StashOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Stash]!
  user(where: UserWhereUniqueInput!): User
  stash(where: StashWhereUniqueInput!): Stash
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  stashesConnection(where: StashWhereInput, orderBy: StashOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StashConnection!
  """
  Fetches an object given its ID
  """
  node("""
  The ID of an object
  """
  id: ID!): Node
}

enum Role {
  ADMIN
  HUNTER
}

"""
A connection to a list of items.
"""
type StashConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [StashEdge]!
  aggregate: AggregateStash!
}

input StashCreateInput {
  name: String!
  lat: Float!
  long: Float!
  claimCode: String!
  clue1: String!
  clue2: String!
  claimed: Boolean
}

input StashCreateManyInput {
  create: [StashCreateInput!]
  connect: [StashWhereUniqueInput!]
}

"""
An edge in a connection.
"""
type StashEdge {
  """
  The item at the end of the edge.
  """
  node: Stash!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum StashOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  lat_ASC
  lat_DESC
  long_ASC
  long_DESC
  claimCode_ASC
  claimCode_DESC
  clue1_ASC
  clue1_DESC
  clue2_ASC
  clue2_DESC
  claimed_ASC
  claimed_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type StashPreviousValues {
  id: ID!
  name: String!
  lat: Float!
  long: Float!
  claimCode: String!
  clue1: String!
  clue2: String!
  claimed: Boolean
}

type StashSubscriptionPayload {
  mutation: MutationType!
  node: Stash
  updatedFields: [String!]
  previousValues: StashPreviousValues
}

input StashSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [StashSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [StashSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: StashWhereInput
}

input StashUpdateDataInput {
  name: String
  lat: Float
  long: Float
  claimCode: String
  clue1: String
  clue2: String
  claimed: Boolean
}

input StashUpdateInput {
  name: String
  lat: Float
  long: Float
  claimCode: String
  clue1: String
  clue2: String
  claimed: Boolean
}

input StashUpdateManyInput {
  create: [StashCreateInput!]
  connect: [StashWhereUniqueInput!]
  disconnect: [StashWhereUniqueInput!]
  delete: [StashWhereUniqueInput!]
  update: [StashUpdateWithWhereUniqueNestedInput!]
  upsert: [StashUpsertWithWhereUniqueNestedInput!]
}

input StashUpdateWithWhereUniqueNestedInput {
  where: StashWhereUniqueInput!
  data: StashUpdateDataInput!
}

input StashUpsertWithWhereUniqueNestedInput {
  where: StashWhereUniqueInput!
  update: StashUpdateDataInput!
  create: StashCreateInput!
}

input StashWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [StashWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [StashWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  lat: Float
  """
  All values that are not equal to given value.
  """
  lat_not: Float
  """
  All values that are contained in given list.
  """
  lat_in: [Float!]
  """
  All values that are not contained in given list.
  """
  lat_not_in: [Float!]
  """
  All values less than the given value.
  """
  lat_lt: Float
  """
  All values less than or equal the given value.
  """
  lat_lte: Float
  """
  All values greater than the given value.
  """
  lat_gt: Float
  """
  All values greater than or equal the given value.
  """
  lat_gte: Float
  long: Float
  """
  All values that are not equal to given value.
  """
  long_not: Float
  """
  All values that are contained in given list.
  """
  long_in: [Float!]
  """
  All values that are not contained in given list.
  """
  long_not_in: [Float!]
  """
  All values less than the given value.
  """
  long_lt: Float
  """
  All values less than or equal the given value.
  """
  long_lte: Float
  """
  All values greater than the given value.
  """
  long_gt: Float
  """
  All values greater than or equal the given value.
  """
  long_gte: Float
  claimCode: String
  """
  All values that are not equal to given value.
  """
  claimCode_not: String
  """
  All values that are contained in given list.
  """
  claimCode_in: [String!]
  """
  All values that are not contained in given list.
  """
  claimCode_not_in: [String!]
  """
  All values less than the given value.
  """
  claimCode_lt: String
  """
  All values less than or equal the given value.
  """
  claimCode_lte: String
  """
  All values greater than the given value.
  """
  claimCode_gt: String
  """
  All values greater than or equal the given value.
  """
  claimCode_gte: String
  """
  All values containing the given string.
  """
  claimCode_contains: String
  """
  All values not containing the given string.
  """
  claimCode_not_contains: String
  """
  All values starting with the given string.
  """
  claimCode_starts_with: String
  """
  All values not starting with the given string.
  """
  claimCode_not_starts_with: String
  """
  All values ending with the given string.
  """
  claimCode_ends_with: String
  """
  All values not ending with the given string.
  """
  claimCode_not_ends_with: String
  clue1: String
  """
  All values that are not equal to given value.
  """
  clue1_not: String
  """
  All values that are contained in given list.
  """
  clue1_in: [String!]
  """
  All values that are not contained in given list.
  """
  clue1_not_in: [String!]
  """
  All values less than the given value.
  """
  clue1_lt: String
  """
  All values less than or equal the given value.
  """
  clue1_lte: String
  """
  All values greater than the given value.
  """
  clue1_gt: String
  """
  All values greater than or equal the given value.
  """
  clue1_gte: String
  """
  All values containing the given string.
  """
  clue1_contains: String
  """
  All values not containing the given string.
  """
  clue1_not_contains: String
  """
  All values starting with the given string.
  """
  clue1_starts_with: String
  """
  All values not starting with the given string.
  """
  clue1_not_starts_with: String
  """
  All values ending with the given string.
  """
  clue1_ends_with: String
  """
  All values not ending with the given string.
  """
  clue1_not_ends_with: String
  clue2: String
  """
  All values that are not equal to given value.
  """
  clue2_not: String
  """
  All values that are contained in given list.
  """
  clue2_in: [String!]
  """
  All values that are not contained in given list.
  """
  clue2_not_in: [String!]
  """
  All values less than the given value.
  """
  clue2_lt: String
  """
  All values less than or equal the given value.
  """
  clue2_lte: String
  """
  All values greater than the given value.
  """
  clue2_gt: String
  """
  All values greater than or equal the given value.
  """
  clue2_gte: String
  """
  All values containing the given string.
  """
  clue2_contains: String
  """
  All values not containing the given string.
  """
  clue2_not_contains: String
  """
  All values starting with the given string.
  """
  clue2_starts_with: String
  """
  All values not starting with the given string.
  """
  clue2_not_starts_with: String
  """
  All values ending with the given string.
  """
  clue2_ends_with: String
  """
  All values not ending with the given string.
  """
  clue2_not_ends_with: String
  claimed: Boolean
  """
  All values that are not equal to given value.
  """
  claimed_not: Boolean
}

input StashWhereUniqueInput {
  id: ID
  name: String
  claimCode: String
  clue1: String
  clue2: String
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  stash(where: StashSubscriptionWhereInput): StashSubscriptionPayload
}

"""
A connection to a list of items.
"""
type UserConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  password: String!
  email: String!
  rank: Float
  role: Role
  stashClaims: StashCreateManyInput
}

"""
An edge in a connection.
"""
type UserEdge {
  """
  The item at the end of the edge.
  """
  node: User!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  password_ASC
  password_DESC
  email_ASC
  email_DESC
  rank_ASC
  rank_DESC
  role_ASC
  role_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  password: String!
  email: String!
  rank: Float
  role: Role
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
  password: String
  email: String
  rank: Float
  role: Role
  stashClaims: StashUpdateManyInput
}

input UserWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  password: String
  """
  All values that are not equal to given value.
  """
  password_not: String
  """
  All values that are contained in given list.
  """
  password_in: [String!]
  """
  All values that are not contained in given list.
  """
  password_not_in: [String!]
  """
  All values less than the given value.
  """
  password_lt: String
  """
  All values less than or equal the given value.
  """
  password_lte: String
  """
  All values greater than the given value.
  """
  password_gt: String
  """
  All values greater than or equal the given value.
  """
  password_gte: String
  """
  All values containing the given string.
  """
  password_contains: String
  """
  All values not containing the given string.
  """
  password_not_contains: String
  """
  All values starting with the given string.
  """
  password_starts_with: String
  """
  All values not starting with the given string.
  """
  password_not_starts_with: String
  """
  All values ending with the given string.
  """
  password_ends_with: String
  """
  All values not ending with the given string.
  """
  password_not_ends_with: String
  email: String
  """
  All values that are not equal to given value.
  """
  email_not: String
  """
  All values that are contained in given list.
  """
  email_in: [String!]
  """
  All values that are not contained in given list.
  """
  email_not_in: [String!]
  """
  All values less than the given value.
  """
  email_lt: String
  """
  All values less than or equal the given value.
  """
  email_lte: String
  """
  All values greater than the given value.
  """
  email_gt: String
  """
  All values greater than or equal the given value.
  """
  email_gte: String
  """
  All values containing the given string.
  """
  email_contains: String
  """
  All values not containing the given string.
  """
  email_not_contains: String
  """
  All values starting with the given string.
  """
  email_starts_with: String
  """
  All values not starting with the given string.
  """
  email_not_starts_with: String
  """
  All values ending with the given string.
  """
  email_ends_with: String
  """
  All values not ending with the given string.
  """
  email_not_ends_with: String
  rank: Float
  """
  All values that are not equal to given value.
  """
  rank_not: Float
  """
  All values that are contained in given list.
  """
  rank_in: [Float!]
  """
  All values that are not contained in given list.
  """
  rank_not_in: [Float!]
  """
  All values less than the given value.
  """
  rank_lt: Float
  """
  All values less than or equal the given value.
  """
  rank_lte: Float
  """
  All values greater than the given value.
  """
  rank_gt: Float
  """
  All values greater than or equal the given value.
  """
  rank_gte: Float
  role: Role
  """
  All values that are not equal to given value.
  """
  role_not: Role
  """
  All values that are contained in given list.
  """
  role_in: [Role!]
  """
  All values that are not contained in given list.
  """
  role_not_in: [Role!]
  stashClaims_every: StashWhereInput
  stashClaims_some: StashWhereInput
  stashClaims_none: StashWhereInput
}

input UserWhereUniqueInput {
  id: ID
  name: String
  email: String
}
